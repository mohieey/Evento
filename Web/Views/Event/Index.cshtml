@using PagedList;
@using PagedList.Mvc;
@using DAL;
@using Microsoft.AspNet.Identity;
@model IPagedList<BL.ViewModels.EventViewModel>
@{
    ViewBag.Title = "Events";
}

<button data-toggle="collapse" data-target="#demo" class="btn btn-info">Filter</button>

<div id="demo" class="collapse">

    @using (Html.BeginForm("Index", "Event", FormMethod.Get))
    {
        <div class="form-group">
            @Html.Label("Name")
            @Html.TextBox("eventName")
            <button class="btn btn-outline-dark">Search By Name</button>
        </div>
    }


    @using (Html.BeginForm("Index", "Event", FormMethod.Get))
    {
        <div class="form-group">
            @Html.Label("Host Name")
            @Html.TextBox("hostName")
            <button class="btn btn-outline-dark">Search By Host Name</button>
        </div>
    }


    @using (Html.BeginForm("IndexByCategory", "Event", FormMethod.Get))
    {

        <div class="form-group">
            @Html.Label("Category")
            @{
                var itemsList = new List<SelectListItem>();
                itemsList.AddRange(Enum.GetValues(typeof(Enum_Category)).Cast<Enum_Category>().Select(
                (item, index) => new SelectListItem
                {
                    Text = item.ToString(),
                    Value = (index).ToString()
                }).ToList());
            }

            @Html.DropDownList("category", itemsList, new { @class = "custom-select" })
            <button class="btn btn-outline-dark">Show By Category</button>

        </div>

    }

    @using (Html.BeginForm("IndexByAge", "Event", FormMethod.Get))
    {

        <div class="form-group">
            @Html.Label("Age")
            @{
                var itemsList = new List<SelectListItem>();
                itemsList.AddRange(Enum.GetValues(typeof(Enum_Age)).Cast<Enum_Age>().Select(
                (item, index) => new SelectListItem
                {
                    Text = item.ToString(),
                    Value = (index).ToString()
                }).ToList());
            }

            @Html.DropDownList("Age", itemsList)
            <button class="btn btn-outline-dark">Show By Age</button>

        </div>

    }

</div>

<hr />







@*<div class="container">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Location</th>
                    <th>Category</th>
                    <th>Age</th>
                    <th>Host</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var e in Model)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(e.Name, "Details", "Event", e, null)
                            @if (e.Host.user.UserName == User.Identity.Name)
                            {
                                @Html.ActionLink("Edit", "EditEvent", "Event", e, new { @class = "btn btn-primary" })
                            }
                        </td>
                        <td>@e.location</td>
                        <td>@e.category</td>
                        <td>@e.age</td>
                        <td>@e.Host.user.UserName</td>
                        <td>@Html.ActionLink("Book", "New", "Products", null, new { @class = "btn btn-primary" })</td>

                    </tr>
                }
            </tbody>
        </table>
    </div>*@
<div class="container">
    <div class="card-columns">
        @foreach (var e in Model)
        {
            string bgClass = string.Empty;
            switch (e.category)
            {
                case Enum_Category.Comedy:
                    bgClass = "bg-warning";
                    break;
                case Enum_Category.Sports:
                    bgClass = "bg-success";
                    break;
                case Enum_Category.Musical:
                    bgClass = "bg-info";
                    break;
                case Enum_Category.Cultural:
                    bgClass = "bg-light";
                    break;
                case Enum_Category.Educational:
                    bgClass = "bg-secondary";
                    break;
                case Enum_Category.Kids:
                    bgClass = "bg-warning";
                    break;
                case Enum_Category.Tech:
                    bgClass = "bg-dark";
                    break;
                default:
                    // code block
                    break;
            }

            <div class="card @bgClass table-bordered" style="width: 18rem;">
                <img class="card-img-top" src="~/Content/@e.image" alt="Event Image" style="max-height:200px">
                <div class="card-body">
                    <h5 class="card-title text-white">@e.Name</h5>
                    <p class="card-text text-white">@e.description</p>
                    <div class="d-flex justify-content-between">
                        @Html.ActionLink("Book ticket", "Details", new { id = e.ID }, new { @class = "btn btn-primary" })
                        @Html.ActionLink("Details", "Details", new { id = e.ID }, new { @class = "btn btn-primary" });
                        @*@Html.ActionLink("Book", "Create", "Ticket", e , new { @class = "btn btn-primary" })*@
            </div>


            @*<div class="card @bgClass" style="height:290px;">
                <div class="card-body text-center">

                    @if (e.Host.Id == User.Identity.GetUserId())
                    {
                        <p class="btn btn-light">
                            @Html.ActionLink("Edit", "EditEvent", "Event", e, new { @class = "" })
                        </p>
                    }

                    <p class="card-text display-3 text-white" style="font-size:larger">
                        @Html.ActionLink(e.Name, "Details", "Event", e, new { @class = "text-white" })

                    </p>
                    <p class="card-text display-4 text-white" style="font-size:medium">@e.location</p>
                    <p class="card-text display-4 text-white" style="font-size:medium">@e.category</p>
                    <p class="card-text display-4 text-white" style="font-size:medium">@e.age</p>
                    <p class="card-text display-4 text-white" style="font-size:medium">@e.Host.user.UserName</p>

                </div>
            </div>*@


        }


    </div>
</div>









<ul class="pagination">
    <li class="page-item"><a class="page-link" href="#">Previous</a></li>
    <li class="page-item">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, categoryName = Request.QueryString["categoryName"] }),
new PagedListRenderOptions()
{
LiElementClasses = new List<string> { "page-link active text-white" }
})
    </li>

    <li class="page-item"><a class="page-link" href="#">Next</a></li>
</ul>
