@using PagedList;
@using PagedList.Mvc;
@using DAL;
@using Microsoft.AspNet.Identity;
@model IPagedList<BL.ViewModels.EventViewModel>
@{
    ViewBag.Title = "Events";
}
<div id="NewEventNotification" style="display:none;" class="alert alert-warning fade show">
    <button type="button" id="close" class="close">&times;</button>
    A New Event Called <strong id="newEventName"></strong> Has Been Added!
</div>
<button data-toggle="collapse" data-target="#demo" class="btn btn-info my-3">Filter</button>

<div id="demo" class="collapse">

    @using (Html.BeginForm("Index", "Event", FormMethod.Get))
    {
        <div class="form-group">
            @Html.Label("Name")
            @Html.TextBox("eventName", null, new { @class = "form-control" })
            <button class="btn btn-outline-dark">Search By Name</button>
        </div>
    }


    @using (Html.BeginForm("Index", "Event", FormMethod.Get))
    {
        <div class="form-group">
            @Html.Label("Host Name")
            @Html.TextBox("hostName", null, new { @class = "form-control" })
            <button class="btn btn-outline-dark">Search By Host Name</button>
        </div>
    }


    @using (Html.BeginForm("IndexByCategory", "Event", FormMethod.Get))
    {

        <div class="form-group">
            @Html.Label("Category")
            @{
                var itemsList = new List<SelectListItem>();
                itemsList.AddRange(Enum.GetValues(typeof(Enum_Category)).Cast<Enum_Category>().Select(
                (item, index) => new SelectListItem
                {
                    Text = item.ToString(),
                    Value = (index).ToString()
                }).ToList());
            }

            @Html.DropDownList("category", itemsList, new { @class = "custom-select form-control" })
            <button class="btn btn-outline-dark">Show By Category</button>

        </div>

    }

    @using (Html.BeginForm("IndexByAge", "Event", FormMethod.Get))
    {

        <div class="form-group">
            @Html.Label("Age")
            @{
                var itemsList = new List<SelectListItem>();
                itemsList.AddRange(Enum.GetValues(typeof(Enum_Age)).Cast<Enum_Age>().Select(
                (item, index) => new SelectListItem
                {
                    Text = item.ToString(),
                    Value = (index).ToString()
                }).ToList());
            }

            @Html.DropDownList("Age", itemsList, new { @class = "custom-select form-control" })
            <button class="btn btn-outline-dark">Show By Age</button>

        </div>

    }

</div>

<hr />


<div class="container">
    <div class="card-columns" id="events">
        @foreach (var e in Model)
        {
            string bgClass = string.Empty;
            switch (e.category)
            {
                case Enum_Category.Comedy:
                    bgClass = "bg-warning";
                    break;
                case Enum_Category.Sports:
                    bgClass = "bg-success";
                    break;
                case Enum_Category.Musical:
                    bgClass = "bg-info";
                    break;
                case Enum_Category.Cultural:
                    bgClass = "bg-warning";
                    break;
                case Enum_Category.Educational:
                    bgClass = "bg-secondary";
                    break;
                case Enum_Category.Kids:
                    bgClass = "bg-warning";
                    break;
                case Enum_Category.Tech:
                    bgClass = "bg-dark";
                    break;
                default:
                    break;
            }

            <div class="card @bgClass table-bordered" style="height: 400px; width: 18rem;">
                <img class="card-img-top" src="~/Content/@e.image" alt="Event Image" style="max-height:200px">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <h5 class="card-title text-dark font-weight-bold eventName">@e.Name</h5>
                        <h5 class="card-title text-dark font-weight-bold ml-auto eventPrice">@e.price$</h5>
                    </div>
                    <p class="card-text text-dark" style="height:80px; overflow-y:auto">@e.description</p>

                    <div class="d-flex justify-content-between" style="margin-top:10px">
                        @if (e.Host != null && e.Host.Id == User.Identity.GetUserId())
                        {
                            @Html.ActionLink("Edit", "EditEvent", "Event", e, new { @class = "btn btn-primary" })
                        }
                        @if (User.IsInRole("User"))
                        {
                            @Html.ActionLink("Book ticket", "AddTicket", "ShoppingCart", new { eventId = e.ID }, new { @class = "btn btn-primary btnBookTicket" });
                        }
                        @Html.ActionLink("Details", "Details", new { id = e.ID }, new { @class = "btn btn-primary ml-auto" })
                    </div>
                </div>
            </div>

        }


    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <script src="~/signalr/js"></script>
    <script>
        var proxy = $.connection.newEventHub;
        $.connection.hub.start().done(
            function () {
                console.log("Connected");
            }
        );
        $(".btnBookTicket").click(function () {

            @using Microsoft.AspNet.Identity;
            var eventName = $(this).parent().parent().find(".eventName").html();
            var eventPrice = $(this).parent().parent().find(".eventPrice").html();
            var userId = "@User.Identity.GetUserId()";

            console.log("ASDASDASD")

            proxy.server.AddTicket(eventName, eventPrice, userId);
        });
    </script>
    <script>
        var proxy = $.connection.newEventHub;
        $.connection.hub.start().done(
            function () {
                console.log("Connected");
            }
        );

        proxy.client.NotifyNewEvent = function (e) {

            $("#newEventName").text(e.Name);
            $("#NewEventNotification").fadeIn();


        }

        $("#close").click(() => {
            $("#NewEventNotification").fadeOut();
        })
    </script>
}









<ul class="pagination">
    <li class="page-item"><a class="page-link" href="#">Previous</a></li>
    <li class="page-item">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, categoryName = Request.QueryString["categoryName"] }),
new PagedListRenderOptions()
{
LiElementClasses = new List<string> { "page-link active text-white" }
})
    </li>

    <li class="page-item"><a class="page-link" href="#">Next</a></li>
</ul>